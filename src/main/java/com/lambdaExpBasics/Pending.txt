This is to show how lambda can be prepared using anonymous classes.

Functional interface behavior w.r.t inheritance:

1. Functional interface can have only one abstract method. But it can have multiple default OR static methods.

2. "@FunctionalInteface" annotation is not mandatory. But it's recommended to use it.

3. Interface method override rules are maintained in functional interface inheritance. So in such case, child cannot provide a new interface method 
		(except static / default) if parent has already an public abstract method. Though it can override parent interface method. 

#####

############## watched #############

-- function / lambda / functional interfaces	(durga)
https://www.youtube.com/watch?v=Tm2BpKlv1rU&list=PLd3UqWTnYXOlrKZWFTbgguqNRA_uVyeBl

-- streams (Durga)
https://www.youtube.com/watch?v=WWXPQUgXagk 	
https://www.youtube.com/watch?v=5duxFiseLRE 

#######pending#################

-- lambda & streams (Venkat)
https://www.youtube.com/watch?v=1OpAgZvYXLQ&t=2s

############################

best exercises:

http://zetcode.com/all/#java
	http://zetcode.com/java/streamfilter/
	http://zetcode.com/java/streamreduce/
	http://zetcode.com/java/streammap/
	
https://mkyong.com/tutorials/java-8-tutorials/

